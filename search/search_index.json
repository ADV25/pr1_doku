{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Startseite Hier findest du eine Sammlung an Java-Befehlen und unseren Vereinbarungen zu Struktogrammen aus dem PR1-Unterricht.","title":"Startseite"},{"location":"#startseite","text":"Hier findest du eine Sammlung an Java-Befehlen und unseren Vereinbarungen zu Struktogrammen aus dem PR1-Unterricht.","title":"Startseite"},{"location":"java/","text":"PR1 Dokumentation Hier findest du eine Sammlung an Java-Befehlen aus dem PR1-Unterricht. GitHub Hier findest du die unterschiedlichen GitHub-Repositories von Mitsch\u00fclern: bdwebnet/pr1 GreenM4x/AdvPR1","title":"Allgemein"},{"location":"java/#pr1-dokumentation","text":"Hier findest du eine Sammlung an Java-Befehlen aus dem PR1-Unterricht.","title":"PR1 Dokumentation"},{"location":"java/#github","text":"Hier findest du die unterschiedlichen GitHub-Repositories von Mitsch\u00fclern: bdwebnet/pr1 GreenM4x/AdvPR1","title":"GitHub"},{"location":"java/1-Eingabe/scanner/","text":"Benutzer Eingabe Zahlen oder Text Eingabe - Scanner Scanner Importieren import java.until.Scanner ; Scanner Objekt erstellen Scanner scannerName = new Scanner ( System . in ); Auslesen von einer Eingabe String name = scannerName . nextLine (); //Auslesen von einer Zeichenkette int alter = scannerName . nextInt (); //Auslesen von einer Ganzzahl double groese = scannerName . nextDouble (); //Auslesen von einer Flie\u00dfkommazahl Scanner am Ende schlie\u00dfen scannerName . close (); Weiterf\u00fchrende Links / Quellen: https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html","title":"Benutzer Eingabe"},{"location":"java/1-Eingabe/scanner/#benutzer-eingabe","text":"","title":"Benutzer Eingabe"},{"location":"java/1-Eingabe/scanner/#zahlen-oder-text-eingabe-scanner","text":"","title":"Zahlen oder Text Eingabe - Scanner"},{"location":"java/1-Eingabe/scanner/#scanner-importieren","text":"import java.until.Scanner ;","title":"Scanner Importieren"},{"location":"java/1-Eingabe/scanner/#scanner-objekt-erstellen","text":"Scanner scannerName = new Scanner ( System . in );","title":"Scanner Objekt erstellen"},{"location":"java/1-Eingabe/scanner/#auslesen-von-einer-eingabe","text":"String name = scannerName . nextLine (); //Auslesen von einer Zeichenkette int alter = scannerName . nextInt (); //Auslesen von einer Ganzzahl double groese = scannerName . nextDouble (); //Auslesen von einer Flie\u00dfkommazahl","title":"Auslesen von einer Eingabe"},{"location":"java/1-Eingabe/scanner/#scanner-am-ende-schlieen","text":"scannerName . close (); Weiterf\u00fchrende Links / Quellen: https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html","title":"Scanner am Ende schlie\u00dfen"},{"location":"java/2-Verarbeitung/arrays/","text":"Arrays Deklarierung & Initialisierung Variante 1 int MyArray [] = new int [ 10 ] ; Variante 1 int MyArray [] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; Zugriff auf Arrays Ausgeben des 1. (0.) Elements System . out . print ( MyArray [ 0 ] ); // Ausgabe z.B. \"0\" mit for -Schleife for ( int i = 0 ; i < MyArray . length ; i ++ ) { // jeweils aktueller Wert von MyArray-Element mit MyArray[i] auslesen } mit for-each -Schleife for ( int zahl : MyArray ) { // jeweils aktueller Wert von MyArray-Element in zahl gespeichert }","title":"Arrays"},{"location":"java/2-Verarbeitung/arrays/#arrays","text":"","title":"Arrays"},{"location":"java/2-Verarbeitung/arrays/#deklarierung-initialisierung","text":"Variante 1 int MyArray [] = new int [ 10 ] ; Variante 1 int MyArray [] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 };","title":"Deklarierung &amp; Initialisierung"},{"location":"java/2-Verarbeitung/arrays/#zugriff-auf-arrays","text":"Ausgeben des 1. (0.) Elements System . out . print ( MyArray [ 0 ] ); // Ausgabe z.B. \"0\"","title":"Zugriff auf Arrays"},{"location":"java/2-Verarbeitung/arrays/#mit-for-schleife","text":"for ( int i = 0 ; i < MyArray . length ; i ++ ) { // jeweils aktueller Wert von MyArray-Element mit MyArray[i] auslesen }","title":"mit for-Schleife"},{"location":"java/2-Verarbeitung/arrays/#mit-for-each-schleife","text":"for ( int zahl : MyArray ) { // jeweils aktueller Wert von MyArray-Element in zahl gespeichert }","title":"mit for-each-Schleife"},{"location":"java/2-Verarbeitung/datentypen/","text":"Datentypen Primitive Datentypen Ganzzahltypen byte short int long Gleitpunkttypen float double char","title":"Datentypen"},{"location":"java/2-Verarbeitung/datentypen/#datentypen","text":"","title":"Datentypen"},{"location":"java/2-Verarbeitung/datentypen/#primitive-datentypen","text":"Ganzzahltypen byte short int long Gleitpunkttypen float double char","title":"Primitive Datentypen"},{"location":"java/2-Verarbeitung/rechnen/","text":"Rechnen in Java Arithmetische Operatoren Operator Bedeutung Beispiel + addiert zwei Werte ergebnis = zahl1 + zahl2 - subtrahiert zwei Werte ergebnis = zahl1 - zahl2 * multipliziert zwei Werte ergebnis = zahl1 * zahl2 / dividiert Kommazahlen bei Datentyp double (Kommazahlendivision) ergebnis = zahl1 / zahl2 / dividiert Ganzzahlen bei Datentyp int (Ganzzahldivision) ergebnis = zahl1 / zahl2 % Modulo-Operator (nur bei Datentyp int ), berechnet den Rest einer Ganzzahldivision ergebnis = zahl1 % zahl2 Wurzelziehen \\(\\sqrt{4}\\) kann in Java mit Math.sqrt(4) berechnet werden. Rechnen mit Potenzen \\(4^2\\) kann","title":"Rechnen in Java"},{"location":"java/2-Verarbeitung/rechnen/#rechnen-in-java","text":"","title":"Rechnen in Java"},{"location":"java/2-Verarbeitung/rechnen/#arithmetische-operatoren","text":"Operator Bedeutung Beispiel + addiert zwei Werte ergebnis = zahl1 + zahl2 - subtrahiert zwei Werte ergebnis = zahl1 - zahl2 * multipliziert zwei Werte ergebnis = zahl1 * zahl2 / dividiert Kommazahlen bei Datentyp double (Kommazahlendivision) ergebnis = zahl1 / zahl2 / dividiert Ganzzahlen bei Datentyp int (Ganzzahldivision) ergebnis = zahl1 / zahl2 % Modulo-Operator (nur bei Datentyp int ), berechnet den Rest einer Ganzzahldivision ergebnis = zahl1 % zahl2","title":"Arithmetische Operatoren"},{"location":"java/2-Verarbeitung/rechnen/#wurzelziehen","text":"\\(\\sqrt{4}\\) kann in Java mit Math.sqrt(4) berechnet werden.","title":"Wurzelziehen"},{"location":"java/2-Verarbeitung/rechnen/#rechnen-mit-potenzen","text":"\\(4^2\\) kann","title":"Rechnen mit Potenzen"},{"location":"java/2-Verarbeitung/schleifen/","text":"Schleifen do-while -Schleifen (fu\u00dfgesteuert) do { } while (); while -Schleifen (kopfgesteuert) while () { } for -Schleifen (kopfgesteuert) for ( int i = 0 ; i < 10 ; i ++ ) { }","title":"Schleifen"},{"location":"java/2-Verarbeitung/schleifen/#schleifen","text":"","title":"Schleifen"},{"location":"java/2-Verarbeitung/schleifen/#do-while-schleifen-fugesteuert","text":"do { } while ();","title":"do-while-Schleifen (fu\u00dfgesteuert)"},{"location":"java/2-Verarbeitung/schleifen/#while-schleifen-kopfgesteuert","text":"while () { }","title":"while-Schleifen (kopfgesteuert)"},{"location":"java/2-Verarbeitung/schleifen/#for-schleifen-kopfgesteuert","text":"for ( int i = 0 ; i < 10 ; i ++ ) { }","title":"for-Schleifen (kopfgesteuert)"},{"location":"java/3-Ausgabe/formatierung/","text":"Formatierung bei der Ausgabe Formatierung von Zahlen - DecimalFormat DecimalFormat Importieren import java.text.DecimalFormat ; DecimalFormat Objekt erstellen DecimalFormat dicimalformatName = new DecimalFormat ( /*pattern*/ ); Speciale \"Pattern\" Charaktere Symbol Bedeutung 0 Angezeigte Ziffer # Bei einer Null keine Ziffer Angezeigt . Dezimaltrennzeichen , Gruppierungstrennzeichen Ausgabe Beispiele DecimalFormat dicimalformatName = new DecimalFormat ( \"#.00\" ); System . out . println ( dicimalformatName . format ( 42.404 )); // Ausgabe: 42.40 DecimalFormat dicimalformatName = new DecimalFormat ( \"#.##\" ); System . out . println ( dicimalformatName . format ( 42.404 )); // Ausgabe: 42.4 DecimalFormat dicimalformatName = new DecimalFormat ( \"#,###,###\" ); System . out . println ( dicimalformatName . format ( 1337420.404 )); // Ausgabe: 1.337.420 Weiterf\u00fchrende Links / Quellen: https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html","title":"Formatierung"},{"location":"java/3-Ausgabe/formatierung/#formatierung-bei-der-ausgabe","text":"","title":"Formatierung bei der Ausgabe"},{"location":"java/3-Ausgabe/formatierung/#formatierung-von-zahlen-decimalformat","text":"","title":"Formatierung von Zahlen - DecimalFormat"},{"location":"java/3-Ausgabe/formatierung/#decimalformat-importieren","text":"import java.text.DecimalFormat ;","title":"DecimalFormat Importieren"},{"location":"java/3-Ausgabe/formatierung/#decimalformat-objekt-erstellen","text":"DecimalFormat dicimalformatName = new DecimalFormat ( /*pattern*/ );","title":"DecimalFormat Objekt erstellen"},{"location":"java/3-Ausgabe/formatierung/#speciale-pattern-charaktere","text":"Symbol Bedeutung 0 Angezeigte Ziffer # Bei einer Null keine Ziffer Angezeigt . Dezimaltrennzeichen , Gruppierungstrennzeichen","title":"Speciale \"Pattern\" Charaktere"},{"location":"java/3-Ausgabe/formatierung/#ausgabe-beispiele","text":"DecimalFormat dicimalformatName = new DecimalFormat ( \"#.00\" ); System . out . println ( dicimalformatName . format ( 42.404 )); // Ausgabe: 42.40 DecimalFormat dicimalformatName = new DecimalFormat ( \"#.##\" ); System . out . println ( dicimalformatName . format ( 42.404 )); // Ausgabe: 42.4 DecimalFormat dicimalformatName = new DecimalFormat ( \"#,###,###\" ); System . out . println ( dicimalformatName . format ( 1337420.404 )); // Ausgabe: 1.337.420 Weiterf\u00fchrende Links / Quellen: https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html","title":"Ausgabe Beispiele"},{"location":"java/3-Ausgabe/textausgabe/","text":"Textausgabe System.out.print Einfache Textausgabe System.out.printl Einfache Textausgabe mit Zeilenumbruch am Ende System.out.printf Textausgabe mit vordefiniertem Format System . out . printf ( FORMAT , ARGUMENTE ); Formatierungsregeln flags width precision conversion-character %[ flags ][ width ][ . precision ] conversion - character [] = optional M\u00f6gliche Werte f\u00fcr conversion-character Datentyp Kurz-Schreibweise String s Decimal Integers d Flie\u00dfkommazahl f Datum/Zeit t Weiterf\u00fchrende Links / Quellen https://www.baeldung.com/java-printstream-printf","title":"Textausgabe"},{"location":"java/3-Ausgabe/textausgabe/#textausgabe","text":"","title":"Textausgabe"},{"location":"java/3-Ausgabe/textausgabe/#systemoutprint","text":"Einfache Textausgabe","title":"System.out.print"},{"location":"java/3-Ausgabe/textausgabe/#systemoutprintl","text":"Einfache Textausgabe mit Zeilenumbruch am Ende","title":"System.out.printl"},{"location":"java/3-Ausgabe/textausgabe/#systemoutprintf","text":"Textausgabe mit vordefiniertem Format System . out . printf ( FORMAT , ARGUMENTE );","title":"System.out.printf"},{"location":"java/3-Ausgabe/textausgabe/#formatierungsregeln","text":"flags width precision conversion-character %[ flags ][ width ][ . precision ] conversion - character [] = optional","title":"Formatierungsregeln"},{"location":"java/3-Ausgabe/textausgabe/#mogliche-werte-fur-conversion-character","text":"Datentyp Kurz-Schreibweise String s Decimal Integers d Flie\u00dfkommazahl f Datum/Zeit t","title":"M\u00f6gliche Werte f\u00fcr conversion-character"},{"location":"java/3-Ausgabe/textausgabe/#weiterfuhrende-links-quellen","text":"https://www.baeldung.com/java-printstream-printf","title":"Weiterf\u00fchrende Links / Quellen"},{"location":"java/4-Objektorientiert/Klassen/","text":"Objekte und Klassen Objekte sind cool klasssen auch Klassen Objekte","title":"Objekte und Klassen"},{"location":"java/4-Objektorientiert/Klassen/#objekte-und-klassen","text":"Objekte sind cool klasssen auch","title":"Objekte und Klassen"},{"location":"java/4-Objektorientiert/Klassen/#klassen","text":"","title":"Klassen"},{"location":"java/4-Objektorientiert/Klassen/#objekte","text":"","title":"Objekte"},{"location":"java/4-Objektorientiert/Zugriffsmodifikator/","text":"Zugriffsmodifikator Zugriffsmodifikatoren definieren die Sichtbarkeit eines Attributs, eines Konstruktors oder einer Methode. Public Der Zugriffsmodifikatoren public erm\u00f6glich den zugriff dieses Attributs sowohl innerhalb als auch au\u00dferhalb seiner Klassen. Private Der Zugriffsmodifikatoren private erm\u00f6glich den zugriff dieses Attributs nur innerhalb seiner Klassen und ist auserhalb dieser Klasse unsichbar. Static","title":"Zugriffsmodifikator"},{"location":"java/4-Objektorientiert/Zugriffsmodifikator/#zugriffsmodifikator","text":"Zugriffsmodifikatoren definieren die Sichtbarkeit eines Attributs, eines Konstruktors oder einer Methode.","title":"Zugriffsmodifikator"},{"location":"java/4-Objektorientiert/Zugriffsmodifikator/#public","text":"Der Zugriffsmodifikatoren public erm\u00f6glich den zugriff dieses Attributs sowohl innerhalb als auch au\u00dferhalb seiner Klassen.","title":"Public"},{"location":"java/4-Objektorientiert/Zugriffsmodifikator/#private","text":"Der Zugriffsmodifikatoren private erm\u00f6glich den zugriff dieses Attributs nur innerhalb seiner Klassen und ist auserhalb dieser Klasse unsichbar.","title":"Private"},{"location":"java/4-Objektorientiert/Zugriffsmodifikator/#static","text":"","title":"Static"},{"location":"struktogramm/","text":"Allgemein","title":"Allgemein"},{"location":"struktogramm/#allgemein","text":"","title":"Allgemein"}]}